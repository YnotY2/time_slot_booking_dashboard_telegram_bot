# Main ToDo's Today:

1,
-Make it so database populating function is automatically ran from main.py every
2H, async ofcours. DONE


2,
-Then create function to actually manage the database time-slots making
them unavailable, aka BOOKED. DONE

3,
-Then create a management command, string '/ta6fsugsfta8sgf' to access the confirm
order time-slot/confirm booking dasboar for the admin user, mangement for bookings.
DONE

4,
Allow the admin to set 'is_booked' = True for any AVAILABLE time-slots,
(can make a time-slot available or unavailable. Mostly unavailable tho. [main purpose])
DONE

5, Modify managing bookings function, to return a 5 int PIN when 'is_booked' is set to TRUE.
if a time-slot 'is_booked' is set to FALSE, we remove the PIN.

The PIN should be added within the table 'time_slots' making it a check for when
user-attempts to access service.


!!!! LOGIC ISSUE TABLE TIME_SLOTS
I have a issue currently we fetch all available time-slots by simply looking for time-slots
with a start time 2h from now and a end-time 46 h from now. Which is fine.

The issue might lay with the fact when we populate we use a interval of 2h, it should
not make time-slots like so;
22:00 - 00:00
23:00 - 01:00

But it might do that currently, this needs fixing. As a user can absolutely
not have a overlaying time_slot ofc.

   3 | 2024-08-06 21:00:00 | 2024-08-06 23:00:00 | t         | 72517
  93 | 2024-08-06 18:00:00 | 2024-08-06 20:00:00 | f         |
  94 | 2024-08-06 20:00:00 | 2024-08-06 22:00:00 | f
    95 | 2024-08-06 22:00:00 | 2024-08-07 00:00:00 | t         | 33945

How does this mistake happen?

This issue still persists, if I book a time_slot from 01:00-03:00 all the sudden the new time_slots
range from 02:00-04:00. If I book that 02:00-04:00 time_slot all the sudden a new time_slot appears
03:00-05:00...

This is a logic issue.

it is most likely the 'fetching_available_time_slot logic' not the populating logic which is the
issue!!

It most likely happens because when we book a time-slot that is 2H away when we populated and
has not yet ended. Then we generate a new display a new available_time slot via the
fetching_available_time_slot function. And the start time is indeed 2H away. But it
overlaps with a existing time_slot. So we need to ensure there is absolutely 0 overlap
with a existing time_slot.


TEST:
first population, everything looks good and works as intended;
----+---------------------+---------------------+-----------+------------
  1 | 2024-08-06 23:00:00 | 2024-08-07 01:00:00 | f         |
  2 | 2024-08-07 01:00:00 | 2024-08-07 03:00:00 | f         |
  3 | 2024-08-07 03:00:00 | 2024-08-07 05:00:00 | f         |
  4 | 2024-08-07 05:00:00 | 2024-08-07 07:00:00 | f         |
  5 | 2024-08-07 07:00:00 | 2024-08-07 09:00:00 | f         |
  6 | 2024-08-07 09:00:00 | 2024-08-07 11:00:00 | f         |
  7 | 2024-08-07 11:00:00 | 2024-08-07 13:00:00 | f         |
  8 | 2024-08-07 13:00:00 | 2024-08-07 15:00:00 | f         |
  9 | 2024-08-07 15:00:00 | 2024-08-07 17:00:00 | f         |
 10 | 2024-08-07 17:00:00 | 2024-08-07 19:00:00 | f         |
 11 | 2024-08-07 19:00:00 | 2024-08-07 21:00:00 | f         |
 12 | 2024-08-07 21:00:00 | 2024-08-07 23:00:00 | f         |
 13 | 2024-08-07 23:00:00 | 2024-08-08 01:00:00 | f         |
 14 | 2024-08-08 01:00:00 | 2024-08-08 03:00:00 | f         |
 15 | 2024-08-08 03:00:00 | 2024-08-08 05:00:00 | f         |
 16 | 2024-08-08 05:00:00 | 2024-08-08 07:00:00 | f         |
 17 | 2024-08-08 07:00:00 | 2024-08-08 09:00:00 | f         |
 18 | 2024-08-08 09:00:00 | 2024-08-08 11:00:00 | f         |
 19 | 2024-08-08 11:00:00 | 2024-08-08 13:00:00 | f         |
 20 | 2024-08-08 13:00:00 | 2024-08-08 15:00:00 | f         |
 21 | 2024-08-08 15:00:00 | 2024-08-08 17:00:00 | f         |
 22 | 2024-08-08 17:00:00 | 2024-08-08 19:00:00 | f         |
 23 | 2024-08-08 19:00:00 | 2024-08-08 21:00:00 | f         |
(23 rows)

Second population with no time_slots booked still working as expected.

----+---------------------+---------------------+-----------+------------
  1 | 2024-08-06 23:00:00 | 2024-08-07 01:00:00 | f         |
  2 | 2024-08-07 01:00:00 | 2024-08-07 03:00:00 | f         |
  3 | 2024-08-07 03:00:00 | 2024-08-07 05:00:00 | f         |
  4 | 2024-08-07 05:00:00 | 2024-08-07 07:00:00 | f         |
  5 | 2024-08-07 07:00:00 | 2024-08-07 09:00:00 | f         |
  6 | 2024-08-07 09:00:00 | 2024-08-07 11:00:00 | f         |
  7 | 2024-08-07 11:00:00 | 2024-08-07 13:00:00 | f         |
  8 | 2024-08-07 13:00:00 | 2024-08-07 15:00:00 | f         |
  9 | 2024-08-07 15:00:00 | 2024-08-07 17:00:00 | f         |
 10 | 2024-08-07 17:00:00 | 2024-08-07 19:00:00 | f         |
 11 | 2024-08-07 19:00:00 | 2024-08-07 21:00:00 | f         |
 12 | 2024-08-07 21:00:00 | 2024-08-07 23:00:00 | f         |
 13 | 2024-08-07 23:00:00 | 2024-08-08 01:00:00 | f         |
 14 | 2024-08-08 01:00:00 | 2024-08-08 03:00:00 | f         |
 15 | 2024-08-08 03:00:00 | 2024-08-08 05:00:00 | f         |
 16 | 2024-08-08 05:00:00 | 2024-08-08 07:00:00 | f         |
 17 | 2024-08-08 07:00:00 | 2024-08-08 09:00:00 | f         |
 18 | 2024-08-08 09:00:00 | 2024-08-08 11:00:00 | f         |
 19 | 2024-08-08 11:00:00 | 2024-08-08 13:00:00 | f         |
 20 | 2024-08-08 13:00:00 | 2024-08-08 15:00:00 | f         |
 21 | 2024-08-08 15:00:00 | 2024-08-08 17:00:00 | f         |
 22 | 2024-08-08 17:00:00 | 2024-08-08 19:00:00 | f         |
 23 | 2024-08-08 19:00:00 | 2024-08-08 21:00:00 | f         |
(23 rows)


Now to actually book some time_slots;
----+---------------------+---------------------+-----------+------------
  1 | 2024-08-06 23:00:00 | 2024-08-07 01:00:00 | f         |
  2 | 2024-08-07 01:00:00 | 2024-08-07 03:00:00 | f         |
  5 | 2024-08-07 07:00:00 | 2024-08-07 09:00:00 | f         |
  6 | 2024-08-07 09:00:00 | 2024-08-07 11:00:00 | f         |
  7 | 2024-08-07 11:00:00 | 2024-08-07 13:00:00 | f         |
  8 | 2024-08-07 13:00:00 | 2024-08-07 15:00:00 | f         |
  9 | 2024-08-07 15:00:00 | 2024-08-07 17:00:00 | f         |
 10 | 2024-08-07 17:00:00 | 2024-08-07 19:00:00 | f         |
 11 | 2024-08-07 19:00:00 | 2024-08-07 21:00:00 | f         |
 12 | 2024-08-07 21:00:00 | 2024-08-07 23:00:00 | f         |
 13 | 2024-08-07 23:00:00 | 2024-08-08 01:00:00 | f         |
 14 | 2024-08-08 01:00:00 | 2024-08-08 03:00:00 | f         |
 15 | 2024-08-08 03:00:00 | 2024-08-08 05:00:00 | f         |
 16 | 2024-08-08 05:00:00 | 2024-08-08 07:00:00 | f         |
 17 | 2024-08-08 07:00:00 | 2024-08-08 09:00:00 | f         |
 18 | 2024-08-08 09:00:00 | 2024-08-08 11:00:00 | f         |
 19 | 2024-08-08 11:00:00 | 2024-08-08 13:00:00 | f         |
 20 | 2024-08-08 13:00:00 | 2024-08-08 15:00:00 | f         |
 21 | 2024-08-08 15:00:00 | 2024-08-08 17:00:00 | f         |
 22 | 2024-08-08 17:00:00 | 2024-08-08 19:00:00 | f         |
 23 | 2024-08-08 19:00:00 | 2024-08-08 21:00:00 | f         |
  3 | 2024-08-07 03:00:00 | 2024-08-07 05:00:00 | t         | 97167
  4 | 2024-08-07 05:00:00 | 2024-08-07 07:00:00 | t         | 91680

Still the same amount of rows. Still working as intended.

-modifying the time_slots fetch available logic, to fetch all available time_slots within the
table without skiping first 2H should fix the issue. It is up to the user to
then decide to book that one or not.

I think I have fixed the bug, now should work as expected.

